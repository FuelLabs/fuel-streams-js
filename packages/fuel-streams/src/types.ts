/**
 * This file is auto-generated by scripts/generate-subjects.ts
 * Do not edit this file manually
 */

import type {
  BN,
  BytesLike,
  Block as FuelsBlock,
  Input as FuelsInput,
  InputCoin as FuelsInputCoin,
  InputContract as FuelsInputContract,
  InputMessage as FuelsInputMessage,
  Output as FuelsOutput,
  OutputChange as FuelsOutputChange,
  OutputCoin as FuelsOutputCoin,
  OutputContract as FuelsOutputContract,
  OutputContractCreated as FuelsOutputContractCreated,
  OutputVariable as FuelsOutputVariable,
  Receipt as FuelsReceipt,
  Transaction as FuelsTransaction,
} from 'fuels';

// ----------------------------------------------------------------------------
// Base Types
// ----------------------------------------------------------------------------
export type Bytes32 = BytesLike;
export type Address = string;
export type AssetId = string;
export type ContractId = string;
export type BlockHeight = number;
export type DaBlockHeight = number;
export type MessageId = string;
export type TxId = string;
export type HexData = string;
export type Salt = string;
export type Amount = string;
export type Nonce = string;
export type Word = string;

// Base interface for common fields
interface BaseFields {
  txIndex: number;
}

export type UtxoId = {
  txId: string;
  outputIndex: number;
};

export type TxPointer = {
  blockHeight: number;
  txIndex: number;
};

// ----------------------------------------------------------------------------
// Stream Types
// ----------------------------------------------------------------------------
export enum StreamNames {
  Blocks = 'blocks',
  Inputs = 'inputs',
  Outputs = 'outputs',
  Receipts = 'receipts',
  Transactions = 'transactions',
  Utxos = 'utxos',
  Predicates = 'predicates',
}

export enum ClientStatus {
  Connected = 'connected',
  Disconnected = 'disconnected',
  Reconnecting = 'reconnecting',
  Disconnecting = 'disconnecting',
  Errored = 'errored',
  Stale = 'stale',
}

// ----------------------------------------------------------------------------
// Identifier Types
// ----------------------------------------------------------------------------
export enum IdentifierKind {
  AssetID = 'asset_id',
  ContractID = 'contract_id',
}

// ----------------------------------------------------------------------------
// Block Types
// ----------------------------------------------------------------------------
export type RawBlock = {
  id: string;
  height: number;
  time: string;
  transactionIds: string[];
  version: 'V1';
  producer: string;
  consensus: {
    type: 'Genesis' | 'PoAConsensus';
    signature?: string;
    chainConfigHash?: string;
    coinsRoot?: string;
    contractsRoot?: string;
    messagesRoot?: string;
    transactionsRoot?: string;
  };
  header: {
    daHeight: number;
    stateTransitionBytecodeVersion: number;
    transactionsCount: number;
    transactionsRoot: string;
    messageOutboxRoot: string;
    eventInboxRoot: string;
    prevRoot: string;
    applicationHash: string;
    consensusParametersVersion: number;
    height: number;
    messageReceiptCount: number;
    time: string;
    version: 'V1';
    id: string;
  };
};

export type Block = FuelsBlock & {
  consensus: RawBlock['consensus'];
  version: RawBlock['version'];
};

// ----------------------------------------------------------------------------
// Output Types
// ----------------------------------------------------------------------------
export enum OutputType {
  Coin = 'coin',
  Contract = 'contract',
  Change = 'change',
  Variable = 'variable',
  ContractCreated = 'contract_created',
}

export interface RawBaseOutput extends BaseFields {
  outputIndex: number;
}

export type RawCoinOutput = RawBaseOutput & {
  type: OutputType.Coin;
  amount: number;
  assetId: string;
  to: string;
};

export type RawContractOutput = RawBaseOutput & {
  type: OutputType.Contract;
  balanceRoot: string;
  stateRoot: string;
  inputIndex: number;
};

export type RawChangeOutput = RawBaseOutput & {
  type: OutputType.Change;
  amount: number;
  assetId: string;
  to: string;
};

export type RawVariableOutput = RawBaseOutput & {
  type: OutputType.Variable;
  amount: number;
  assetId: string;
  to: string;
};

export type RawContractCreated = RawBaseOutput & {
  type: OutputType.ContractCreated;
  contractId: string;
  stateRoot: string;
};

export type RawOutput =
  | RawCoinOutput
  | RawContractOutput
  | RawChangeOutput
  | RawVariableOutput
  | RawContractCreated;

export type OutputCoin = FuelsOutputCoin;
export type OutputContract = FuelsOutputContract;
export type OutputChange = FuelsOutputChange;
export type OutputVariable = FuelsOutputVariable;
export type OutputContractCreated = FuelsOutputContractCreated;
export type Output = FuelsOutput;

// ----------------------------------------------------------------------------
// Input Types
// ----------------------------------------------------------------------------
export enum InputType {
  Coin = 'coin',
  Contract = 'contract',
  Message = 'message',
}

export interface RawBaseInput extends BaseFields {
  inputIndex: number;
}

export type RawInputCoin = RawBaseInput & {
  type: InputType.Coin;
  amount: number;
  assetId: string;
  owner: string;
  predicate: string;
  predicateData: string;
  predicateGasUsed: number;
  txPointer: TxPointer;
  utxoId: UtxoId;
  witnessIndex: number;
};

export type RawInputContract = RawBaseInput & {
  type: InputType.Contract;
  balanceRoot: string;
  stateRoot: string;
  txPointer: TxPointer;
  utxoId: UtxoId;
  contractId: string;
};

export type RawInputMessage = RawBaseInput & {
  type: InputType.Message;
  amount: number;
  data?: string;
  nonce: string;
  predicate: string;
  predicateData: string;
  predicateGasUsed: number;
  recipient: string;
  sender: string;
  witnessIndex: number;
};

export type RawInput = RawInputCoin | RawInputContract | RawInputMessage;
export type InputCoin = FuelsInputCoin;
export type InputContract = FuelsInputContract;
export type InputMessage = FuelsInputMessage;
export type Input = FuelsInput;

// ----------------------------------------------------------------------------
// Receipt Types
// ----------------------------------------------------------------------------
export enum ReceiptType {
  Call = 'call',
  Return = 'return',
  ReturnData = 'return_data',
  Panic = 'panic',
  Revert = 'revert',
  Log = 'log',
  LogData = 'log_data',
  Transfer = 'transfer',
  TransferOut = 'transfer_out',
  ScriptResult = 'script_result',
  MessageOut = 'message_out',
  Mint = 'mint',
  Burn = 'burn',
}

export interface RawBaseReceipt extends BaseFields {
  receiptIndex: number;
}

export type RawCallReceipt = RawBaseReceipt & {
  type: ReceiptType.Call;
  id: string;
  to: string;
  amount: string;
  assetId: string;
  gas: string;
  param1: string;
  param2: string;
  pc: string;
  is: string;
};

export type RawReturnReceipt = RawBaseReceipt & {
  type: ReceiptType.Return;
  id: string;
  val: string;
  pc: string;
  is: string;
};

export type RawReturnDataReceipt = RawBaseReceipt & {
  type: ReceiptType.ReturnData;
  id: string;
  ptr: string;
  len: string;
  digest: string;
  pc: string;
  is: string;
  data?: string;
};

export type RawPanicReceipt = RawBaseReceipt & {
  type: ReceiptType.Panic;
  id: string;
  reason: string;
  pc: string;
  is: string;
  contractId?: string;
};

export type RawRevertReceipt = RawBaseReceipt & {
  type: ReceiptType.Revert;
  id: string;
  ra: string;
  pc: string;
  is: string;
};

export type RawLogReceipt = RawBaseReceipt & {
  type: ReceiptType.Log;
  id: string;
  ra: string;
  rb: string;
  rc: string;
  rd: string;
  pc: string;
  is: string;
};

export type RawLogDataReceipt = RawBaseReceipt & {
  type: ReceiptType.LogData;
  id: string;
  ra: string;
  rb: string;
  ptr: string;
  len: string;
  digest: string;
  pc: string;
  is: string;
  data?: string;
};

export type RawTransferReceipt = RawBaseReceipt & {
  type: ReceiptType.Transfer;
  id: string;
  to: string;
  amount: string;
  assetId: string;
  pc: string;
  is: string;
};

export type RawTransferOutReceipt = RawBaseReceipt & {
  type: ReceiptType.TransferOut;
  id: string;
  to: string;
  amount: string;
  assetId: string;
  pc: string;
  is: string;
};

export type RawScriptResultReceipt = RawBaseReceipt & {
  type: ReceiptType.ScriptResult;
  result: string;
  gasUsed: string;
};

export type RawMessageOutReceipt = RawBaseReceipt & {
  type: ReceiptType.MessageOut;
  sender: string;
  recipient: string;
  amount: string;
  nonce: string;
  len: string;
  digest: string;
  data?: string;
};

export type RawMintReceipt = RawBaseReceipt & {
  type: ReceiptType.Mint;
  subId: string;
  contractId: string;
  val: string;
  pc: string;
  is: string;
};

export type RawBurnReceipt = RawBaseReceipt & {
  type: ReceiptType.Burn;
  subId: string;
  contractId: string;
  val: string;
  pc: string;
  is: string;
};

export type RawReceipt =
  | RawCallReceipt
  | RawReturnReceipt
  | RawReturnDataReceipt
  | RawPanicReceipt
  | RawRevertReceipt
  | RawLogReceipt
  | RawLogDataReceipt
  | RawTransferReceipt
  | RawTransferOutReceipt
  | RawScriptResultReceipt
  | RawMessageOutReceipt
  | RawMintReceipt
  | RawBurnReceipt;

export type Receipt = FuelsReceipt;

// ----------------------------------------------------------------------------
// UTXO Types
// ----------------------------------------------------------------------------
export enum UtxoStatus {
  Spent = 'spent',
  Unspent = 'unspent',
}

export enum UtxoType {
  Contract = 'contract',
  Coin = 'coin',
  Message = 'message',
  InputContract = 'input_contract',
  InputCoin = 'input_coin',
  OutputCoin = 'output_coin',
  OutputChange = 'output_change',
  OutputVariable = 'output_variable',
}

export type RawUtxo = {
  status: UtxoStatus;
  type: UtxoType;
  txId: string;
  utxoId: UtxoId;
  from?: string;
  to?: string;
  amount?: number;
  assetId?: string;
  contractId?: string;
  nonce?: string;
};

export type Utxo = {
  status: UtxoStatus;
  type: UtxoType;
  txId: string;
  utxoId: UtxoId;
  from?: string;
  to?: string;
  amount?: BN;
  assetId?: string;
  contractId?: string;
  nonce?: string;
};

// ----------------------------------------------------------------------------
// Predicate Types
// ----------------------------------------------------------------------------
export type RawPredicate = {
  blobId?: string;
  predicateAddress: string;
  predicateBytecode: string;
  txId: string;
  txIndex: number;
  inputIndex: number;
  assetId: string;
};

export type Predicate = {
  blobId?: string;
  predicateAddress: string;
  predicateBytecode: string;
  txId: string;
  txIndex: BN;
  inputIndex: BN;
  assetId: string;
};

// ----------------------------------------------------------------------------
// Transaction Types
// ----------------------------------------------------------------------------
export type Policies = {
  maxFee: number;
  witnessLimit: number;
  maturity: number;
  maxSize: number;
};

export type RawTransaction = {
  id: string;
  type: TransactionType;
  bytecodeRoot?: string;
  bytecodeWitnessIndex?: number;
  blobId?: string;
  inputAssetIds?: string[];
  inputContract?: RawInputContract;
  inputContracts?: string[];
  inputs: RawInput[];
  outputContract?: RawContractOutput;
  outputs: RawOutput[];
  isCreate: boolean;
  isMint: boolean;
  isScript: boolean;
  isUpgrade: boolean;
  isUpload: boolean;
  isBlob: boolean;
  maturity?: number;
  mintAmount?: number;
  mintAssetId?: string;
  mintGasPrice?: number;
  policies?: Policies;
  proofSet: string[];
  rawPayload: string;
  receiptsRoot?: string;
  salt?: string;
  script?: string;
  scriptData?: string;
  scriptGasLimit?: number;
  status: TransactionStatus;
  storageSlots: { key: string; value: string }[];
  subsectionIndex?: number;
  subsectionsNumber?: number;
  txPointer?: TxPointer;
  upgradePurpose?: number;
  witnesses: string[];
  receipts: RawReceipt[];
  scriptLength?: number;
  scriptDataLength?: number;
  storageSlotsCount: number;
  proofSetCount: number;
  witnessesCount: number;
  inputsCount: number;
  outputsCount: number;
  txIndex: number;
};

export type Transaction = FuelsTransaction;

export enum TransactionType {
  Create = 'create',
  Mint = 'mint',
  Script = 'script',
  Upgrade = 'upgrade',
  Upload = 'upload',
  Blob = 'blob',
}

export enum TransactionStatus {
  Failed = 'failed',
  Submitted = 'submitted',
  SqueezedOut = 'squeezed_out',
  Success = 'success',
  None = 'none',
}
