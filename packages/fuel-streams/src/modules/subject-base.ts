/**
 * This file is auto-generated by scripts/generate-subjects.ts
 * Do not edit this file manually
 */

import v from 'voca';

export abstract class SubjectBase<TFields extends Record<string, unknown>> {
  constructor(protected fields: Partial<TFields> = {}) {}
  protected abstract format: string;

  parse(): string {
    const fields = Object.entries(this.fields).reduce<Record<string, string>>(
      (acc, [key, value]) => {
        acc[key] = value?.toString() ?? '*';
        return acc;
      },
      {},
    );

    return this.format.replace(
      /\{([^}]+)\}/g,
      (_, key: string) => fields[v.camelCase(key)] ?? '*',
    );
  }

  build(fields: Partial<TFields>): this {
    this.fields = { ...this.fields, ...fields };
    return this;
  }

  static build<T extends SubjectBase<Record<string, unknown>>>(
    this: new () => T,
    fields: Partial<Parameters<T['build']>[0]> = {},
  ): T {
    // biome-ignore lint/complexity/noThisInStatic: <explanation>
    return new this().build(fields);
  }

  static wildcard<T extends SubjectBase<Record<string, unknown>>>(
    this: new () => T,
  ): string {
    // biome-ignore lint/complexity/noThisInStatic: <explanation>
    return new this().parse();
  }
}
