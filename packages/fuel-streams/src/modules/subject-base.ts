/**
 * This file is auto-generated by scripts/generate-subjects.ts
 * Do not edit this file manually
 */

import type { JsonAbi } from 'fuels';
import v from 'voca';
import type { SubjectPayload } from '../ws';

export type GenericRecord = Record<string, any>;

export interface EntityParser<
  T extends GenericRecord,
  R extends GenericRecord,
> {
  parse(data: R, abi?: JsonAbi): T;
}

export type SubjectMetadata<
  T extends GenericRecord,
  R extends GenericRecord,
> = {
  id: string;
  format: string;
  parser: EntityParser<T, R>;
};

export abstract class SubjectBase<
  TFields extends GenericRecord,
  T extends GenericRecord,
  R extends GenericRecord,
> {
  constructor(protected _fields: Partial<TFields> = {}) {}
  protected abstract metadata: SubjectMetadata<T, R>;

  // This is a hack to make the compiler happy
  _entity(): T {
    return {} as T;
  }
  _rawEntity(): R {
    return {} as R;
  }

  get fields(): Partial<TFields> {
    return this._fields;
  }

  get id(): string {
    return this.metadata.id;
  }

  get format(): string {
    return this.metadata.format;
  }

  get parser(): EntityParser<T, R> {
    return this.metadata.parser;
  }

  paramsFromFields(): Record<string, string> {
    return Object.entries(this.fields).reduce<Record<string, string>>(
      (acc, [key, value]) => {
        if (value && value !== '*') {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
  }

  toPayload(): SubjectPayload {
    return {
      subject: this.id,
      params: this.paramsFromFields(),
    };
  }

  parse(): string {
    const fields = Object.entries(this.fields).reduce<Record<string, string>>(
      (acc, [key, value]) => {
        acc[key] = value?.toString() ?? '*';
        return acc;
      },
      {},
    );

    return this.format.replace(
      /\{([^}]+)\}/g,
      (_, key: string) => fields[v.camelCase(key)] ?? '*',
    );
  }

  build(fields: Partial<TFields>): this {
    this._fields = { ...this._fields, ...fields };
    return this;
  }

  static build<
    T extends SubjectBase<GenericRecord, GenericRecord, GenericRecord>,
  >(this: new () => T, fields: Partial<Parameters<T['build']>[0]> = {}): T {
    // biome-ignore lint/complexity/noThisInStatic: <explanation>
    return new this().build(fields);
  }

  static wildcard<
    T extends SubjectBase<GenericRecord, GenericRecord, GenericRecord>,
  >(this: new () => T): string {
    // biome-ignore lint/complexity/noThisInStatic: <explanation>
    return new this().parse();
  }
}
