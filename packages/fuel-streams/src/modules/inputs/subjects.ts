/**
 * This file is auto-generated by scripts/generate-subjects.ts
 * Do not edit this file manually
 *
 * Generated Subjects:
 * - InputsSubject
 * - InputsCoinSubject
 * - InputsContractSubject
 * - InputsMessageSubject
 */

import { InputParser } from '../../parsers';
import type {
  Address,
  AssetId,
  BlockHeight,
  ContractId,
  Input,
  InputType,
  RawInput,
  TxId,
} from '../../types';
import { SubjectBase } from '../subject-base';

type InputsFields = {
  inputType: InputType;
  blockHeight: BlockHeight;
  txId: TxId;
  txIndex: BN;
  inputIndex: BN;
};

export class InputsSubject extends SubjectBase<InputsFields, Input, RawInput> {
  metadata = {
    id: 'inputs',
    format:
      'inputs.{input_type}.{block_height}.{tx_id}.{tx_index}.{input_index}',
    parser: new InputParser(),
  };
}

type InputsCoinFields = {
  blockHeight: BlockHeight;
  txId: TxId;
  txIndex: BN;
  inputIndex: BN;
  owner: Address;
  asset: AssetId;
};

export class InputsCoinSubject extends SubjectBase<
  InputsCoinFields,
  Input,
  RawInput
> {
  metadata = {
    id: 'inputs_coin',
    format:
      'inputs.coin.{block_height}.{tx_id}.{tx_index}.{input_index}.{owner}.{asset}',
    parser: new InputParser(),
  };
}

type InputsContractFields = {
  blockHeight: BlockHeight;
  txId: TxId;
  txIndex: BN;
  inputIndex: BN;
  contract: ContractId;
};

export class InputsContractSubject extends SubjectBase<
  InputsContractFields,
  Input,
  RawInput
> {
  metadata = {
    id: 'inputs_contract',
    format:
      'inputs.contract.{block_height}.{tx_id}.{tx_index}.{input_index}.{contract}',
    parser: new InputParser(),
  };
}

type InputsMessageFields = {
  blockHeight: BlockHeight;
  txId: TxId;
  txIndex: BN;
  inputIndex: BN;
  sender: Address;
  recipient: Address;
};

export class InputsMessageSubject extends SubjectBase<
  InputsMessageFields,
  Input,
  RawInput
> {
  metadata = {
    id: 'inputs_message',
    format:
      'inputs.message.{block_height}.{tx_id}.{tx_index}.{input_index}.{sender}.{recipient}',
    parser: new InputParser(),
  };
}
